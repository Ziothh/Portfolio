---
import { STACK_TECHNOLOGIES_VALIDATOR } from '../../../data/TECHNOLOGIES.constant'
import type { TechStackItems } from '../../../data/TECHNOLOGIES.constant'
import type {MDXInstance} from "astro"
import {z, infer} from "zod"
import CommentSection from '../../../components/blocks/CommentSection.astro'
import StackButton from './StackButton.astro'
// import {HiCalendarDays} from "react-icons/hi"

// const propsValidator = z.object({
//     imageUrl: z.string(),
//     siteLink: z.string().nullable(),
//     githubLink: z.string().nullable(),
//     techStack: z.array(STACK_TECHNOLOGIES_VALIDATOR),
//     // date: z.any().optional()
// })

type Props = {
    project: MDXInstance<{
        // name: string
        imageUrl: string
        siteLink: string | null
        githubLink: string | null
        techStack: TechStackItems.All[]
        date?: string
    }>
}

let error = null

// Astro.props.frontmatter.
try {
    // const isPropsValid = propsValidator.parse(Astro.props.project.frontmatter, {
    //     errorMap: ({
    //         code,
    //         path,
    //         message,
    //     }) => ({
    //         message: `Project mdx frontmatter property on path "${path}" is invalid.\nCode: "${code}"\nZod message: "${message}"`
    //     })
    // })
} catch (e) {
    console.error(e)
    error = e;
}

// const name = Astro.props.file.split("/")
// .pop()
// .slice(2)
// .replace(".project.mdx", "")

const project: Props["project"] = Astro.props.project

const { 
    imageUrl, 
    name, 
    date,
    siteLink, 
    githubLink, 
    techStack, 
 } = project.frontmatter;
---
{error !== null && (
<pre>
{JSON.stringify({
    file: Astro.props.file,
    error,
}, null, 4)}    
</pre>
)}


<article class="rounded-md overflow-hidden">
    <div class="relative">
        <img src={imageUrl} alt={"A picture of the project"}>

        <div class="absolute top-0 left-0 w-full h-full opacity-0 bg-stone-900 bg-opacity-75 hover:opacity-100 transition-opacity duration-150 backdrop-blur-sm p-16 flex flex-col justify-center">
            <h3 class="text-primary text-4xl font-semibold">{name}</h3>
            <div class="mt-4">
                <project.default/>
            </div>
            {date && (
                <p class="text-stone-400 mt-4 text-base flex items-center">
                    <svg aria-label="Date" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
                    </svg>
                    <span>&nbsp;{date}</span>
                </p>
            )}
        </div>
    </div>

    <CommentSection title="Tech stack">
        <div class="flex gap-4">
            {techStack.map(t => (
                <StackButton stackItem={t} />
            ))}
        </div>
    </CommentSection>
    <CommentSection title="See it in action">
        ...
    </CommentSection>
</article>